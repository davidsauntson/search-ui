import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { adaptFacetConfig, adaptFilterConfig, adaptResultFieldsConfig, adaptSearchFieldsConfig } from "./requestAdapters";
export default function adaptRequest(request, queryConfig, documentType) {
  var disjunctiveFacets = queryConfig.disjunctiveFacets,
      disjunctiveFacetsAnalyticsTags = queryConfig.disjunctiveFacetsAnalyticsTags;

  if (disjunctiveFacets) {
    console.warn("search-ui-site-search-connector: disjunctiveFacets is not supported by Site Search");
  }

  if (disjunctiveFacetsAnalyticsTags) {
    console.warn("search-ui-site-search-connector: disjunctiveFacetsAnalyticsTags is not supported by Site Search");
  }

  var updatedFacets = adaptFacetConfig(queryConfig.facets);
  var updatedFilters = adaptFilterConfig(queryConfig.filters !== undefined ? queryConfig.filters : request.filters);
  var page = queryConfig.current !== undefined ? queryConfig.current : request.current;
  var per_page = queryConfig.resultsPerPage !== undefined ? queryConfig.resultsPerPage : request.resultsPerPage;
  var sortDirection = queryConfig.sortDirection !== undefined ? queryConfig.sortDirection : request.sortDirection;
  var sortField = queryConfig.sortField !== undefined ? queryConfig.sortField : request.sortField;

  var _adaptResultFieldsCon = adaptResultFieldsConfig(queryConfig.result_fields),
      _adaptResultFieldsCon2 = _slicedToArray(_adaptResultFieldsCon, 2),
      fetchFields = _adaptResultFieldsCon2[0],
      highlightFields = _adaptResultFieldsCon2[1];

  var updatedSearchFields = adaptSearchFieldsConfig(queryConfig.search_fields);
  var searchTerm = request.searchTerm;
  return _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, per_page && {
    per_page: per_page
  }), page && {
    page: page
  }), sortDirection && {
    sort_direction: _defineProperty({}, documentType, sortDirection)
  }), sortField && {
    sort_field: _defineProperty({}, documentType, sortField)
  }), updatedFilters && {
    filters: _defineProperty({}, documentType, updatedFilters)
  }), updatedFacets && {
    facets: _defineProperty({}, documentType, updatedFacets)
  }), fetchFields && {
    fetch_fields: _defineProperty({}, documentType, fetchFields)
  }), highlightFields && {
    highlight_fields: _defineProperty({}, documentType, highlightFields)
  }), updatedSearchFields && !!updatedSearchFields.length && {
    search_fields: _defineProperty({}, documentType, updatedSearchFields)
  }), {}, {
    q: searchTerm
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZXF1ZXN0QWRhcHRlci5qcyJdLCJuYW1lcyI6WyJhZGFwdEZhY2V0Q29uZmlnIiwiYWRhcHRGaWx0ZXJDb25maWciLCJhZGFwdFJlc3VsdEZpZWxkc0NvbmZpZyIsImFkYXB0U2VhcmNoRmllbGRzQ29uZmlnIiwiYWRhcHRSZXF1ZXN0IiwicmVxdWVzdCIsInF1ZXJ5Q29uZmlnIiwiZG9jdW1lbnRUeXBlIiwiZGlzanVuY3RpdmVGYWNldHMiLCJkaXNqdW5jdGl2ZUZhY2V0c0FuYWx5dGljc1RhZ3MiLCJjb25zb2xlIiwid2FybiIsInVwZGF0ZWRGYWNldHMiLCJmYWNldHMiLCJ1cGRhdGVkRmlsdGVycyIsImZpbHRlcnMiLCJ1bmRlZmluZWQiLCJwYWdlIiwiY3VycmVudCIsInBlcl9wYWdlIiwicmVzdWx0c1BlclBhZ2UiLCJzb3J0RGlyZWN0aW9uIiwic29ydEZpZWxkIiwicmVzdWx0X2ZpZWxkcyIsImZldGNoRmllbGRzIiwiaGlnaGxpZ2h0RmllbGRzIiwidXBkYXRlZFNlYXJjaEZpZWxkcyIsInNlYXJjaF9maWVsZHMiLCJzZWFyY2hUZXJtIiwic29ydF9kaXJlY3Rpb24iLCJzb3J0X2ZpZWxkIiwiZmV0Y2hfZmllbGRzIiwiaGlnaGxpZ2h0X2ZpZWxkcyIsImxlbmd0aCIsInEiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxTQUNFQSxnQkFERixFQUVFQyxpQkFGRixFQUdFQyx1QkFIRixFQUlFQyx1QkFKRixRQUtPLG1CQUxQO0FBT0EsZUFBZSxTQUFTQyxZQUFULENBQXNCQyxPQUF0QixFQUErQkMsV0FBL0IsRUFBNENDLFlBQTVDLEVBQTBEO0FBQUEsTUFDL0RDLGlCQUQrRCxHQUNURixXQURTLENBQy9ERSxpQkFEK0Q7QUFBQSxNQUM1Q0MsOEJBRDRDLEdBQ1RILFdBRFMsQ0FDNUNHLDhCQUQ0Qzs7QUFHdkUsTUFBSUQsaUJBQUosRUFBdUI7QUFDckJFLElBQUFBLE9BQU8sQ0FBQ0MsSUFBUixDQUNFLG9GQURGO0FBR0Q7O0FBRUQsTUFBSUYsOEJBQUosRUFBb0M7QUFDbENDLElBQUFBLE9BQU8sQ0FBQ0MsSUFBUixDQUNFLGlHQURGO0FBR0Q7O0FBRUQsTUFBTUMsYUFBYSxHQUFHWixnQkFBZ0IsQ0FBQ00sV0FBVyxDQUFDTyxNQUFiLENBQXRDO0FBQ0EsTUFBTUMsY0FBYyxHQUFHYixpQkFBaUIsQ0FDdENLLFdBQVcsQ0FBQ1MsT0FBWixLQUF3QkMsU0FBeEIsR0FBb0NWLFdBQVcsQ0FBQ1MsT0FBaEQsR0FBMERWLE9BQU8sQ0FBQ1UsT0FENUIsQ0FBeEM7QUFHQSxNQUFNRSxJQUFJLEdBQ1JYLFdBQVcsQ0FBQ1ksT0FBWixLQUF3QkYsU0FBeEIsR0FBb0NWLFdBQVcsQ0FBQ1ksT0FBaEQsR0FBMERiLE9BQU8sQ0FBQ2EsT0FEcEU7QUFFQSxNQUFNQyxRQUFRLEdBQ1piLFdBQVcsQ0FBQ2MsY0FBWixLQUErQkosU0FBL0IsR0FDSVYsV0FBVyxDQUFDYyxjQURoQixHQUVJZixPQUFPLENBQUNlLGNBSGQ7QUFJQSxNQUFNQyxhQUFhLEdBQ2pCZixXQUFXLENBQUNlLGFBQVosS0FBOEJMLFNBQTlCLEdBQ0lWLFdBQVcsQ0FBQ2UsYUFEaEIsR0FFSWhCLE9BQU8sQ0FBQ2dCLGFBSGQ7QUFJQSxNQUFNQyxTQUFTLEdBQ2JoQixXQUFXLENBQUNnQixTQUFaLEtBQTBCTixTQUExQixHQUNJVixXQUFXLENBQUNnQixTQURoQixHQUVJakIsT0FBTyxDQUFDaUIsU0FIZDs7QUE3QnVFLDhCQWlDaENwQix1QkFBdUIsQ0FDNURJLFdBQVcsQ0FBQ2lCLGFBRGdELENBakNTO0FBQUE7QUFBQSxNQWlDaEVDLFdBakNnRTtBQUFBLE1BaUNuREMsZUFqQ21EOztBQW9DdkUsTUFBTUMsbUJBQW1CLEdBQUd2Qix1QkFBdUIsQ0FDakRHLFdBQVcsQ0FBQ3FCLGFBRHFDLENBQW5EO0FBR0EsTUFBTUMsVUFBVSxHQUFHdkIsT0FBTyxDQUFDdUIsVUFBM0I7QUFFQSx5SkFDTVQsUUFBUSxJQUFJO0FBQUVBLElBQUFBLFFBQVEsRUFBUkE7QUFBRixHQURsQixHQUVNRixJQUFJLElBQUk7QUFBRUEsSUFBQUEsSUFBSSxFQUFKQTtBQUFGLEdBRmQsR0FHTUksYUFBYSxJQUFJO0FBQ25CUSxJQUFBQSxjQUFjLHNCQUNYdEIsWUFEVyxFQUNJYyxhQURKO0FBREssR0FIdkIsR0FRTUMsU0FBUyxJQUFJO0FBQ2ZRLElBQUFBLFVBQVUsc0JBQ1B2QixZQURPLEVBQ1FlLFNBRFI7QUFESyxHQVJuQixHQWFNUixjQUFjLElBQUk7QUFDcEJDLElBQUFBLE9BQU8sc0JBQ0pSLFlBREksRUFDV08sY0FEWDtBQURhLEdBYnhCLEdBa0JNRixhQUFhLElBQUk7QUFDbkJDLElBQUFBLE1BQU0sc0JBQ0hOLFlBREcsRUFDWUssYUFEWjtBQURhLEdBbEJ2QixHQXVCTVksV0FBVyxJQUFJO0FBQ2pCTyxJQUFBQSxZQUFZLHNCQUNUeEIsWUFEUyxFQUNNaUIsV0FETjtBQURLLEdBdkJyQixHQTRCTUMsZUFBZSxJQUFJO0FBQ3JCTyxJQUFBQSxnQkFBZ0Isc0JBQ2J6QixZQURhLEVBQ0VrQixlQURGO0FBREssR0E1QnpCLEdBaUNNQyxtQkFBbUIsSUFDckIsQ0FBQyxDQUFDQSxtQkFBbUIsQ0FBQ08sTUFEcEIsSUFDOEI7QUFDOUJOLElBQUFBLGFBQWEsc0JBQ1ZwQixZQURVLEVBQ0ttQixtQkFETDtBQURpQixHQWxDcEM7QUF1Q0VRLElBQUFBLENBQUMsRUFBRU47QUF2Q0w7QUF5Q0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBhZGFwdEZhY2V0Q29uZmlnLFxuICBhZGFwdEZpbHRlckNvbmZpZyxcbiAgYWRhcHRSZXN1bHRGaWVsZHNDb25maWcsXG4gIGFkYXB0U2VhcmNoRmllbGRzQ29uZmlnXG59IGZyb20gXCIuL3JlcXVlc3RBZGFwdGVyc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGFwdFJlcXVlc3QocmVxdWVzdCwgcXVlcnlDb25maWcsIGRvY3VtZW50VHlwZSkge1xuICBjb25zdCB7IGRpc2p1bmN0aXZlRmFjZXRzLCBkaXNqdW5jdGl2ZUZhY2V0c0FuYWx5dGljc1RhZ3MgfSA9IHF1ZXJ5Q29uZmlnO1xuXG4gIGlmIChkaXNqdW5jdGl2ZUZhY2V0cykge1xuICAgIGNvbnNvbGUud2FybihcbiAgICAgIFwic2VhcmNoLXVpLXNpdGUtc2VhcmNoLWNvbm5lY3RvcjogZGlzanVuY3RpdmVGYWNldHMgaXMgbm90IHN1cHBvcnRlZCBieSBTaXRlIFNlYXJjaFwiXG4gICAgKTtcbiAgfVxuXG4gIGlmIChkaXNqdW5jdGl2ZUZhY2V0c0FuYWx5dGljc1RhZ3MpIHtcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICBcInNlYXJjaC11aS1zaXRlLXNlYXJjaC1jb25uZWN0b3I6IGRpc2p1bmN0aXZlRmFjZXRzQW5hbHl0aWNzVGFncyBpcyBub3Qgc3VwcG9ydGVkIGJ5IFNpdGUgU2VhcmNoXCJcbiAgICApO1xuICB9XG5cbiAgY29uc3QgdXBkYXRlZEZhY2V0cyA9IGFkYXB0RmFjZXRDb25maWcocXVlcnlDb25maWcuZmFjZXRzKTtcbiAgY29uc3QgdXBkYXRlZEZpbHRlcnMgPSBhZGFwdEZpbHRlckNvbmZpZyhcbiAgICBxdWVyeUNvbmZpZy5maWx0ZXJzICE9PSB1bmRlZmluZWQgPyBxdWVyeUNvbmZpZy5maWx0ZXJzIDogcmVxdWVzdC5maWx0ZXJzXG4gICk7XG4gIGNvbnN0IHBhZ2UgPVxuICAgIHF1ZXJ5Q29uZmlnLmN1cnJlbnQgIT09IHVuZGVmaW5lZCA/IHF1ZXJ5Q29uZmlnLmN1cnJlbnQgOiByZXF1ZXN0LmN1cnJlbnQ7XG4gIGNvbnN0IHBlcl9wYWdlID1cbiAgICBxdWVyeUNvbmZpZy5yZXN1bHRzUGVyUGFnZSAhPT0gdW5kZWZpbmVkXG4gICAgICA/IHF1ZXJ5Q29uZmlnLnJlc3VsdHNQZXJQYWdlXG4gICAgICA6IHJlcXVlc3QucmVzdWx0c1BlclBhZ2U7XG4gIGNvbnN0IHNvcnREaXJlY3Rpb24gPVxuICAgIHF1ZXJ5Q29uZmlnLnNvcnREaXJlY3Rpb24gIT09IHVuZGVmaW5lZFxuICAgICAgPyBxdWVyeUNvbmZpZy5zb3J0RGlyZWN0aW9uXG4gICAgICA6IHJlcXVlc3Quc29ydERpcmVjdGlvbjtcbiAgY29uc3Qgc29ydEZpZWxkID1cbiAgICBxdWVyeUNvbmZpZy5zb3J0RmllbGQgIT09IHVuZGVmaW5lZFxuICAgICAgPyBxdWVyeUNvbmZpZy5zb3J0RmllbGRcbiAgICAgIDogcmVxdWVzdC5zb3J0RmllbGQ7XG4gIGNvbnN0IFtmZXRjaEZpZWxkcywgaGlnaGxpZ2h0RmllbGRzXSA9IGFkYXB0UmVzdWx0RmllbGRzQ29uZmlnKFxuICAgIHF1ZXJ5Q29uZmlnLnJlc3VsdF9maWVsZHNcbiAgKTtcbiAgY29uc3QgdXBkYXRlZFNlYXJjaEZpZWxkcyA9IGFkYXB0U2VhcmNoRmllbGRzQ29uZmlnKFxuICAgIHF1ZXJ5Q29uZmlnLnNlYXJjaF9maWVsZHNcbiAgKTtcbiAgY29uc3Qgc2VhcmNoVGVybSA9IHJlcXVlc3Quc2VhcmNoVGVybTtcblxuICByZXR1cm4ge1xuICAgIC4uLihwZXJfcGFnZSAmJiB7IHBlcl9wYWdlIH0pLFxuICAgIC4uLihwYWdlICYmIHsgcGFnZSB9KSxcbiAgICAuLi4oc29ydERpcmVjdGlvbiAmJiB7XG4gICAgICBzb3J0X2RpcmVjdGlvbjoge1xuICAgICAgICBbZG9jdW1lbnRUeXBlXTogc29ydERpcmVjdGlvblxuICAgICAgfVxuICAgIH0pLFxuICAgIC4uLihzb3J0RmllbGQgJiYge1xuICAgICAgc29ydF9maWVsZDoge1xuICAgICAgICBbZG9jdW1lbnRUeXBlXTogc29ydEZpZWxkXG4gICAgICB9XG4gICAgfSksXG4gICAgLi4uKHVwZGF0ZWRGaWx0ZXJzICYmIHtcbiAgICAgIGZpbHRlcnM6IHtcbiAgICAgICAgW2RvY3VtZW50VHlwZV06IHVwZGF0ZWRGaWx0ZXJzXG4gICAgICB9XG4gICAgfSksXG4gICAgLi4uKHVwZGF0ZWRGYWNldHMgJiYge1xuICAgICAgZmFjZXRzOiB7XG4gICAgICAgIFtkb2N1bWVudFR5cGVdOiB1cGRhdGVkRmFjZXRzXG4gICAgICB9XG4gICAgfSksXG4gICAgLi4uKGZldGNoRmllbGRzICYmIHtcbiAgICAgIGZldGNoX2ZpZWxkczoge1xuICAgICAgICBbZG9jdW1lbnRUeXBlXTogZmV0Y2hGaWVsZHNcbiAgICAgIH1cbiAgICB9KSxcbiAgICAuLi4oaGlnaGxpZ2h0RmllbGRzICYmIHtcbiAgICAgIGhpZ2hsaWdodF9maWVsZHM6IHtcbiAgICAgICAgW2RvY3VtZW50VHlwZV06IGhpZ2hsaWdodEZpZWxkc1xuICAgICAgfVxuICAgIH0pLFxuICAgIC4uLih1cGRhdGVkU2VhcmNoRmllbGRzICYmXG4gICAgICAhIXVwZGF0ZWRTZWFyY2hGaWVsZHMubGVuZ3RoICYmIHtcbiAgICAgICAgc2VhcmNoX2ZpZWxkczoge1xuICAgICAgICAgIFtkb2N1bWVudFR5cGVdOiB1cGRhdGVkU2VhcmNoRmllbGRzXG4gICAgICAgIH1cbiAgICAgIH0pLFxuICAgIHE6IHNlYXJjaFRlcm1cbiAgfTtcbn1cbiJdfQ==