"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = adaptRequest;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _requestAdapters = require("./requestAdapters");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function adaptRequest(request, queryConfig, documentType) {
  var disjunctiveFacets = queryConfig.disjunctiveFacets,
      disjunctiveFacetsAnalyticsTags = queryConfig.disjunctiveFacetsAnalyticsTags;

  if (disjunctiveFacets) {
    console.warn("search-ui-site-search-connector: disjunctiveFacets is not supported by Site Search");
  }

  if (disjunctiveFacetsAnalyticsTags) {
    console.warn("search-ui-site-search-connector: disjunctiveFacetsAnalyticsTags is not supported by Site Search");
  }

  var updatedFacets = (0, _requestAdapters.adaptFacetConfig)(queryConfig.facets);
  var updatedFilters = (0, _requestAdapters.adaptFilterConfig)(queryConfig.filters !== undefined ? queryConfig.filters : request.filters);
  var page = queryConfig.current !== undefined ? queryConfig.current : request.current;
  var per_page = queryConfig.resultsPerPage !== undefined ? queryConfig.resultsPerPage : request.resultsPerPage;
  var sortDirection = queryConfig.sortDirection !== undefined ? queryConfig.sortDirection : request.sortDirection;
  var sortField = queryConfig.sortField !== undefined ? queryConfig.sortField : request.sortField;

  var _adaptResultFieldsCon = (0, _requestAdapters.adaptResultFieldsConfig)(queryConfig.result_fields),
      _adaptResultFieldsCon2 = (0, _slicedToArray2.default)(_adaptResultFieldsCon, 2),
      fetchFields = _adaptResultFieldsCon2[0],
      highlightFields = _adaptResultFieldsCon2[1];

  var updatedSearchFields = (0, _requestAdapters.adaptSearchFieldsConfig)(queryConfig.search_fields);
  var searchTerm = request.searchTerm;
  return _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, per_page && {
    per_page: per_page
  }), page && {
    page: page
  }), sortDirection && {
    sort_direction: (0, _defineProperty2.default)({}, documentType, sortDirection)
  }), sortField && {
    sort_field: (0, _defineProperty2.default)({}, documentType, sortField)
  }), updatedFilters && {
    filters: (0, _defineProperty2.default)({}, documentType, updatedFilters)
  }), updatedFacets && {
    facets: (0, _defineProperty2.default)({}, documentType, updatedFacets)
  }), fetchFields && {
    fetch_fields: (0, _defineProperty2.default)({}, documentType, fetchFields)
  }), highlightFields && {
    highlight_fields: (0, _defineProperty2.default)({}, documentType, highlightFields)
  }), updatedSearchFields && !!updatedSearchFields.length && {
    search_fields: (0, _defineProperty2.default)({}, documentType, updatedSearchFields)
  }), {}, {
    q: searchTerm
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZXF1ZXN0QWRhcHRlci5qcyJdLCJuYW1lcyI6WyJhZGFwdFJlcXVlc3QiLCJyZXF1ZXN0IiwicXVlcnlDb25maWciLCJkb2N1bWVudFR5cGUiLCJkaXNqdW5jdGl2ZUZhY2V0cyIsImRpc2p1bmN0aXZlRmFjZXRzQW5hbHl0aWNzVGFncyIsImNvbnNvbGUiLCJ3YXJuIiwidXBkYXRlZEZhY2V0cyIsImZhY2V0cyIsInVwZGF0ZWRGaWx0ZXJzIiwiZmlsdGVycyIsInVuZGVmaW5lZCIsInBhZ2UiLCJjdXJyZW50IiwicGVyX3BhZ2UiLCJyZXN1bHRzUGVyUGFnZSIsInNvcnREaXJlY3Rpb24iLCJzb3J0RmllbGQiLCJyZXN1bHRfZmllbGRzIiwiZmV0Y2hGaWVsZHMiLCJoaWdobGlnaHRGaWVsZHMiLCJ1cGRhdGVkU2VhcmNoRmllbGRzIiwic2VhcmNoX2ZpZWxkcyIsInNlYXJjaFRlcm0iLCJzb3J0X2RpcmVjdGlvbiIsInNvcnRfZmllbGQiLCJmZXRjaF9maWVsZHMiLCJoaWdobGlnaHRfZmllbGRzIiwibGVuZ3RoIiwicSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBOzs7Ozs7QUFPZSxTQUFTQSxZQUFULENBQXNCQyxPQUF0QixFQUErQkMsV0FBL0IsRUFBNENDLFlBQTVDLEVBQTBEO0FBQUEsTUFDL0RDLGlCQUQrRCxHQUNURixXQURTLENBQy9ERSxpQkFEK0Q7QUFBQSxNQUM1Q0MsOEJBRDRDLEdBQ1RILFdBRFMsQ0FDNUNHLDhCQUQ0Qzs7QUFHdkUsTUFBSUQsaUJBQUosRUFBdUI7QUFDckJFLElBQUFBLE9BQU8sQ0FBQ0MsSUFBUixDQUNFLG9GQURGO0FBR0Q7O0FBRUQsTUFBSUYsOEJBQUosRUFBb0M7QUFDbENDLElBQUFBLE9BQU8sQ0FBQ0MsSUFBUixDQUNFLGlHQURGO0FBR0Q7O0FBRUQsTUFBTUMsYUFBYSxHQUFHLHVDQUFpQk4sV0FBVyxDQUFDTyxNQUE3QixDQUF0QjtBQUNBLE1BQU1DLGNBQWMsR0FBRyx3Q0FDckJSLFdBQVcsQ0FBQ1MsT0FBWixLQUF3QkMsU0FBeEIsR0FBb0NWLFdBQVcsQ0FBQ1MsT0FBaEQsR0FBMERWLE9BQU8sQ0FBQ1UsT0FEN0MsQ0FBdkI7QUFHQSxNQUFNRSxJQUFJLEdBQ1JYLFdBQVcsQ0FBQ1ksT0FBWixLQUF3QkYsU0FBeEIsR0FBb0NWLFdBQVcsQ0FBQ1ksT0FBaEQsR0FBMERiLE9BQU8sQ0FBQ2EsT0FEcEU7QUFFQSxNQUFNQyxRQUFRLEdBQ1piLFdBQVcsQ0FBQ2MsY0FBWixLQUErQkosU0FBL0IsR0FDSVYsV0FBVyxDQUFDYyxjQURoQixHQUVJZixPQUFPLENBQUNlLGNBSGQ7QUFJQSxNQUFNQyxhQUFhLEdBQ2pCZixXQUFXLENBQUNlLGFBQVosS0FBOEJMLFNBQTlCLEdBQ0lWLFdBQVcsQ0FBQ2UsYUFEaEIsR0FFSWhCLE9BQU8sQ0FBQ2dCLGFBSGQ7QUFJQSxNQUFNQyxTQUFTLEdBQ2JoQixXQUFXLENBQUNnQixTQUFaLEtBQTBCTixTQUExQixHQUNJVixXQUFXLENBQUNnQixTQURoQixHQUVJakIsT0FBTyxDQUFDaUIsU0FIZDs7QUE3QnVFLDhCQWlDaEMsOENBQ3JDaEIsV0FBVyxDQUFDaUIsYUFEeUIsQ0FqQ2dDO0FBQUE7QUFBQSxNQWlDaEVDLFdBakNnRTtBQUFBLE1BaUNuREMsZUFqQ21EOztBQW9DdkUsTUFBTUMsbUJBQW1CLEdBQUcsOENBQzFCcEIsV0FBVyxDQUFDcUIsYUFEYyxDQUE1QjtBQUdBLE1BQU1DLFVBQVUsR0FBR3ZCLE9BQU8sQ0FBQ3VCLFVBQTNCO0FBRUEseUpBQ01ULFFBQVEsSUFBSTtBQUFFQSxJQUFBQSxRQUFRLEVBQVJBO0FBQUYsR0FEbEIsR0FFTUYsSUFBSSxJQUFJO0FBQUVBLElBQUFBLElBQUksRUFBSkE7QUFBRixHQUZkLEdBR01JLGFBQWEsSUFBSTtBQUNuQlEsSUFBQUEsY0FBYyxvQ0FDWHRCLFlBRFcsRUFDSWMsYUFESjtBQURLLEdBSHZCLEdBUU1DLFNBQVMsSUFBSTtBQUNmUSxJQUFBQSxVQUFVLG9DQUNQdkIsWUFETyxFQUNRZSxTQURSO0FBREssR0FSbkIsR0FhTVIsY0FBYyxJQUFJO0FBQ3BCQyxJQUFBQSxPQUFPLG9DQUNKUixZQURJLEVBQ1dPLGNBRFg7QUFEYSxHQWJ4QixHQWtCTUYsYUFBYSxJQUFJO0FBQ25CQyxJQUFBQSxNQUFNLG9DQUNITixZQURHLEVBQ1lLLGFBRFo7QUFEYSxHQWxCdkIsR0F1Qk1ZLFdBQVcsSUFBSTtBQUNqQk8sSUFBQUEsWUFBWSxvQ0FDVHhCLFlBRFMsRUFDTWlCLFdBRE47QUFESyxHQXZCckIsR0E0Qk1DLGVBQWUsSUFBSTtBQUNyQk8sSUFBQUEsZ0JBQWdCLG9DQUNiekIsWUFEYSxFQUNFa0IsZUFERjtBQURLLEdBNUJ6QixHQWlDTUMsbUJBQW1CLElBQ3JCLENBQUMsQ0FBQ0EsbUJBQW1CLENBQUNPLE1BRHBCLElBQzhCO0FBQzlCTixJQUFBQSxhQUFhLG9DQUNWcEIsWUFEVSxFQUNLbUIsbUJBREw7QUFEaUIsR0FsQ3BDO0FBdUNFUSxJQUFBQSxDQUFDLEVBQUVOO0FBdkNMO0FBeUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgYWRhcHRGYWNldENvbmZpZyxcbiAgYWRhcHRGaWx0ZXJDb25maWcsXG4gIGFkYXB0UmVzdWx0RmllbGRzQ29uZmlnLFxuICBhZGFwdFNlYXJjaEZpZWxkc0NvbmZpZ1xufSBmcm9tIFwiLi9yZXF1ZXN0QWRhcHRlcnNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRhcHRSZXF1ZXN0KHJlcXVlc3QsIHF1ZXJ5Q29uZmlnLCBkb2N1bWVudFR5cGUpIHtcbiAgY29uc3QgeyBkaXNqdW5jdGl2ZUZhY2V0cywgZGlzanVuY3RpdmVGYWNldHNBbmFseXRpY3NUYWdzIH0gPSBxdWVyeUNvbmZpZztcblxuICBpZiAoZGlzanVuY3RpdmVGYWNldHMpIHtcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICBcInNlYXJjaC11aS1zaXRlLXNlYXJjaC1jb25uZWN0b3I6IGRpc2p1bmN0aXZlRmFjZXRzIGlzIG5vdCBzdXBwb3J0ZWQgYnkgU2l0ZSBTZWFyY2hcIlxuICAgICk7XG4gIH1cblxuICBpZiAoZGlzanVuY3RpdmVGYWNldHNBbmFseXRpY3NUYWdzKSB7XG4gICAgY29uc29sZS53YXJuKFxuICAgICAgXCJzZWFyY2gtdWktc2l0ZS1zZWFyY2gtY29ubmVjdG9yOiBkaXNqdW5jdGl2ZUZhY2V0c0FuYWx5dGljc1RhZ3MgaXMgbm90IHN1cHBvcnRlZCBieSBTaXRlIFNlYXJjaFwiXG4gICAgKTtcbiAgfVxuXG4gIGNvbnN0IHVwZGF0ZWRGYWNldHMgPSBhZGFwdEZhY2V0Q29uZmlnKHF1ZXJ5Q29uZmlnLmZhY2V0cyk7XG4gIGNvbnN0IHVwZGF0ZWRGaWx0ZXJzID0gYWRhcHRGaWx0ZXJDb25maWcoXG4gICAgcXVlcnlDb25maWcuZmlsdGVycyAhPT0gdW5kZWZpbmVkID8gcXVlcnlDb25maWcuZmlsdGVycyA6IHJlcXVlc3QuZmlsdGVyc1xuICApO1xuICBjb25zdCBwYWdlID1cbiAgICBxdWVyeUNvbmZpZy5jdXJyZW50ICE9PSB1bmRlZmluZWQgPyBxdWVyeUNvbmZpZy5jdXJyZW50IDogcmVxdWVzdC5jdXJyZW50O1xuICBjb25zdCBwZXJfcGFnZSA9XG4gICAgcXVlcnlDb25maWcucmVzdWx0c1BlclBhZ2UgIT09IHVuZGVmaW5lZFxuICAgICAgPyBxdWVyeUNvbmZpZy5yZXN1bHRzUGVyUGFnZVxuICAgICAgOiByZXF1ZXN0LnJlc3VsdHNQZXJQYWdlO1xuICBjb25zdCBzb3J0RGlyZWN0aW9uID1cbiAgICBxdWVyeUNvbmZpZy5zb3J0RGlyZWN0aW9uICE9PSB1bmRlZmluZWRcbiAgICAgID8gcXVlcnlDb25maWcuc29ydERpcmVjdGlvblxuICAgICAgOiByZXF1ZXN0LnNvcnREaXJlY3Rpb247XG4gIGNvbnN0IHNvcnRGaWVsZCA9XG4gICAgcXVlcnlDb25maWcuc29ydEZpZWxkICE9PSB1bmRlZmluZWRcbiAgICAgID8gcXVlcnlDb25maWcuc29ydEZpZWxkXG4gICAgICA6IHJlcXVlc3Quc29ydEZpZWxkO1xuICBjb25zdCBbZmV0Y2hGaWVsZHMsIGhpZ2hsaWdodEZpZWxkc10gPSBhZGFwdFJlc3VsdEZpZWxkc0NvbmZpZyhcbiAgICBxdWVyeUNvbmZpZy5yZXN1bHRfZmllbGRzXG4gICk7XG4gIGNvbnN0IHVwZGF0ZWRTZWFyY2hGaWVsZHMgPSBhZGFwdFNlYXJjaEZpZWxkc0NvbmZpZyhcbiAgICBxdWVyeUNvbmZpZy5zZWFyY2hfZmllbGRzXG4gICk7XG4gIGNvbnN0IHNlYXJjaFRlcm0gPSByZXF1ZXN0LnNlYXJjaFRlcm07XG5cbiAgcmV0dXJuIHtcbiAgICAuLi4ocGVyX3BhZ2UgJiYgeyBwZXJfcGFnZSB9KSxcbiAgICAuLi4ocGFnZSAmJiB7IHBhZ2UgfSksXG4gICAgLi4uKHNvcnREaXJlY3Rpb24gJiYge1xuICAgICAgc29ydF9kaXJlY3Rpb246IHtcbiAgICAgICAgW2RvY3VtZW50VHlwZV06IHNvcnREaXJlY3Rpb25cbiAgICAgIH1cbiAgICB9KSxcbiAgICAuLi4oc29ydEZpZWxkICYmIHtcbiAgICAgIHNvcnRfZmllbGQ6IHtcbiAgICAgICAgW2RvY3VtZW50VHlwZV06IHNvcnRGaWVsZFxuICAgICAgfVxuICAgIH0pLFxuICAgIC4uLih1cGRhdGVkRmlsdGVycyAmJiB7XG4gICAgICBmaWx0ZXJzOiB7XG4gICAgICAgIFtkb2N1bWVudFR5cGVdOiB1cGRhdGVkRmlsdGVyc1xuICAgICAgfVxuICAgIH0pLFxuICAgIC4uLih1cGRhdGVkRmFjZXRzICYmIHtcbiAgICAgIGZhY2V0czoge1xuICAgICAgICBbZG9jdW1lbnRUeXBlXTogdXBkYXRlZEZhY2V0c1xuICAgICAgfVxuICAgIH0pLFxuICAgIC4uLihmZXRjaEZpZWxkcyAmJiB7XG4gICAgICBmZXRjaF9maWVsZHM6IHtcbiAgICAgICAgW2RvY3VtZW50VHlwZV06IGZldGNoRmllbGRzXG4gICAgICB9XG4gICAgfSksXG4gICAgLi4uKGhpZ2hsaWdodEZpZWxkcyAmJiB7XG4gICAgICBoaWdobGlnaHRfZmllbGRzOiB7XG4gICAgICAgIFtkb2N1bWVudFR5cGVdOiBoaWdobGlnaHRGaWVsZHNcbiAgICAgIH1cbiAgICB9KSxcbiAgICAuLi4odXBkYXRlZFNlYXJjaEZpZWxkcyAmJlxuICAgICAgISF1cGRhdGVkU2VhcmNoRmllbGRzLmxlbmd0aCAmJiB7XG4gICAgICAgIHNlYXJjaF9maWVsZHM6IHtcbiAgICAgICAgICBbZG9jdW1lbnRUeXBlXTogdXBkYXRlZFNlYXJjaEZpZWxkc1xuICAgICAgICB9XG4gICAgICB9KSxcbiAgICBxOiBzZWFyY2hUZXJtXG4gIH07XG59XG4iXX0=